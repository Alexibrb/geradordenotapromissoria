/**
 * @fileoverview Firestore Security Rules for the Promissory Notes application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for the majority of data. Each user has complete control over their own data (clients, notes, payments), which is stored under their respective user ID in Firestore. Global application settings are publicly readable.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. The {userId} MUST match the authenticated user's UID.
 * - /users/{userId}/clients/{clientId}: Stores client data, accessible only to the owning user.
 * - /users/{userId}/clients/{clientId}/promissoryNotes/{promissoryNoteId}: Stores promissory note data, accessible only to the owning user.
 * - /users/{userId}/clients/{clientId}/promissoryNotes/{promissoryNoteId}/payments/{paymentId}: Stores payment data, accessible only to the owning user.
 * - /users/{userId}/settings/appSettings: Stores user-specific settings, accessible only to the owning user.
 * - /app_settings/general: Stores global application settings.
 *
 * Key Security Decisions:
 * - User listing is explicitly disallowed.
 * - The /app_settings/general document is publicly readable.
 * - All write operations require a verified and authenticated user.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @path N/A (Helper function)
     * @allow N/A (Helper function)
     * @deny N/A (Helper function)
     * @principle Authentication: Ensures that only authenticated users can access certain resources.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the request is made by the owner of the resource.
     * @path N/A (Helper function)
     * @allow N/A (Helper function)
     * @deny N/A (Helper function)
     * @principle Authorization: Ensures that only the owner of a resource can modify it.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

     /**
      * @description Checks if the request is made by the owner of an existing resource.
      * @path N/A (Helper function)
      * @allow N/A (Helper function)
      * @deny N/A (Helper function)
      * @principle Authorization: Ensures that only the owner of a resource can modify it, and prevents operations on non-existent documents.
      */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Defines security rules for user documents.
     * @path /users/{userId}
     * @allow (create) If the authenticated user's UID matches the {userId}.
     * @deny (create) If the authenticated user's UID does not match the {userId}.
     * @allow (get) If the request is made by the owner of the user document.
     * @deny (get) If the request is not made by the owner of the user document.
     * @allow (update) If the request is made by the owner of the user document.
     * @deny (update) If the request is not made by the owner of the user document.
     * @allow (delete) If the request is made by the owner of the user document.
     * @deny (delete) If the request is not made by the owner of the user document.
     * @allow (list) if false. User listing is not allowed.
     * @principle Enforces document ownership and prevents unauthorized access to user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Defines security rules for client documents within a user's collection.
     * @path /users/{userId}/clients/{clientId}
     * @allow (create) If the request is made by the owner of the user document.
     * @deny (create) If the request is not made by the owner of the user document.
     * @allow (get) If the request is made by the owner of the user document.
     * @deny (get) If the request is not made by the owner of the user document.
     * @allow (update) If the request is made by the owner of the user document.
     * @deny (update) If the request is not made by the owner of the user document.
     * @allow (delete) If the request is made by the owner of the user document.
     * @deny (delete) If the request is not made by the owner of the user document.
     * @allow (list) If the request is made by the owner of the user document.
     * @deny (list) If the request is not made by the owner of the user document.
     * @principle Enforces document ownership and prevents unauthorized access to client data.
     */
    match /users/{userId}/clients/{clientId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Defines security rules for promissory note documents within a client's collection.
     * @path /users/{userId}/clients/{clientId}/promissoryNotes/{promissoryNoteId}
     * @allow (create) If the request is made by the owner of the user document.
     * @deny (create) If the request is not made by the owner of the user document.
     * @allow (get) If the request is made by the owner of the user document.
     * @deny (get) If the request is not made by the owner of the user document.
     * @allow (update) If the request is made by the owner of the user document.
     * @deny (update) If the request is not made by the owner of the user document.
     * @allow (delete) If the request is made by the owner of the user document.
     * @deny (delete) If the request is not made by the owner of the user document.
     * @allow (list) If the request is made by the owner of the user document.
     * @deny (list) If the request is not made by the owner of the user document.
     * @principle Enforces document ownership and prevents unauthorized access to promissory note data.
     */
    match /users/{userId}/clients/{clientId}/promissoryNotes/{promissoryNoteId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Defines security rules for payment documents within a promissory note's collection.
     * @path /users/{userId}/clients/{clientId}/promissoryNotes/{promissoryNoteId}/payments/{paymentId}
     * @allow (create) If the request is made by the owner of the user document.
     * @deny (create) If the request is not made by the owner of the user document.
     * @allow (get) If the request is made by the owner of the user document.
     * @deny (get) If the request is not made by the owner of the user document.
     * @allow (update) If the request is made by the owner of the user document.
     * @deny (update) If the request is not made by the owner of the user document.
     * @allow (delete) If the request is made by the owner of the user document.
     * @deny (delete) If the request is not made by the owner of the user document.
     * @allow (list) If the request is made by the owner of the user document.
     * @deny (list) If the request is not made by the owner of the user document.
     * @principle Enforces document ownership and prevents unauthorized access to payment data.
     */
    match /users/{userId}/clients/{clientId}/promissoryNotes/{promissoryNoteId}/payments/{paymentId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

     /**
      * @description Defines security rules for user settings.
      * @path /users/{userId}/settings/appSettings
      * @allow (get) If the request is made by the owner of the user document.
      * @deny (get) If the request is not made by the owner of the user document.
      * @allow (create) If the request is made by the owner of the user document.
      * @deny (create) If the request is not made by the owner of the user document.
      * @allow (update) If the request is made by the owner of the user document.
      * @deny (update) If the request is not made by the owner of the user document.
      * @allow (delete) If the request is made by the owner of the user document.
      * @deny (delete) If the request is not made by the owner of the user document.
      * @allow (list) Denied: There is only one settings document per user.
      * @principle Enforces document ownership and prevents unauthorized access to user settings.
      */
    match /users/{userId}/settings/appSettings {
        allow get: if isOwner(userId);
        allow list: if false;
        allow create: if isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Defines security rules for the global application settings.
     * @path /app_settings/general
     * @allow (get, list) Allow public access to read global app settings.
     * @deny (create, update, delete) Deny all write operations.
     * @principle Allows public read access to global settings while restricting write access.
     */
    match /app_settings/general {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}