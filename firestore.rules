/**
 * @fileoverview Firestore Security Rules for Promissory Note App
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for all data, ensuring that only the authenticated user can access their own resources.
 *
 * Data Structure:
 * All data is nested under /users/{userId}, providing a clear hierarchical structure for data isolation.  Settings for each user are stored under /users/{userId}/settings/appSettings
 *
 * Key Security Decisions:
 * - User listing is explicitly denied to protect user privacy.
 * - All write operations are secured with ownership checks based on the `userId` in the path.
 *
 * Denormalization for Authorization:
 * To create simpler, more performant rules, the `userId` from the path is implicitly used for authorization checks, avoiding the need for additional `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Restricts access to the /users collection to ensure only the authenticated user can read/write their own profile.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user_abc' can create their own profile document.
     *   request.auth.uid == 'user_abc'
     * @allow (get, list, update, delete) - User with UID 'user_abc' can read, update, or delete their own profile document.
     *   request.auth.uid == 'user_abc' and resource.data.id == 'user_abc'
     * @deny (create) - User with UID 'user_xyz' cannot create a profile document for user 'user_abc'.
     *   request.auth.uid != 'user_abc'
     * @deny (get, list, update, delete) - User with UID 'user_xyz' cannot read, update, or delete the profile document for user 'user_abc'.
     *   request.auth.uid != 'user_abc'
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree, validates relational integrity between documents.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId && request.resource.data.email == request.auth.token.email;
      allow update: if isOwner(userId) && resource != null && request.resource.data.id == resource.data.id;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Secures the /users/{userId}/clients/{clientId} collection, enforcing that only the authenticated user can access their own clients.
     * @path /users/{userId}/clients/{clientId}
     * @allow (create) - User 'user_abc' can create a new client under their user document.
     *   request.auth.uid == 'user_abc'
     * @allow (get, list, update, delete) - User 'user_abc' can read, update, or delete a client under their user document.
     *   request.auth.uid == 'user_abc'
     * @deny (create) - User 'user_xyz' cannot create a client under user 'user_abc''s document.
     *   request.auth.uid != 'user_abc'
     * @deny (get, list, update, delete) - User 'user_xyz' cannot read, update, or delete a client under user 'user_abc''s document.
     *   request.auth.uid != 'user_abc'
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/clients/{clientId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Secures the /users/{userId}/clients/{clientId}/promissoryNotes/{promissoryNoteId} collection, ensuring that only the authenticated user can access their own promissory notes.
     * @path /users/{userId}/clients/{clientId}/promissoryNotes/{promissoryNoteId}
     * @allow (create) - User 'user_abc' can create a new promissory note under their client document.
     *   request.auth.uid == 'user_abc'
     * @allow (get, list, update, delete) - User 'user_abc' can read, update, or delete a promissory note under their client document.
     *   request.auth.uid == 'user_abc'
     * @deny (create) - User 'user_xyz' cannot create a promissory note under user 'user_abc''s client document.
     *   request.auth.uid != 'user_abc'
     * @deny (get, list, update, delete) - User 'user_xyz' cannot read, update, or delete a promissory note under user 'user_abc''s client document.
     *   request.auth.uid != 'user_abc'
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/clients/{clientId}/promissoryNotes/{promissoryNoteId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Secures the /users/{userId}/clients/{clientId}/promissoryNotes/{promissoryNoteId}/payments/{paymentId} collection, ensuring that only the authenticated user can access their own payments.
     * @path /users/{userId}/clients/{clientId}/promissoryNotes/{promissoryNoteId}/payments/{paymentId}
     * @allow (create) - User 'user_abc' can create a new payment under their promissory note.
     *   request.auth.uid == 'user_abc'
     * @allow (get, list, update, delete) - User 'user_abc' can read, update, or delete a payment under their promissory note.
     *   request.auth.uid == 'user_abc'
     * @deny (create) - User 'user_xyz' cannot create a payment under user 'user_abc''s promissory note.
     *   request.auth.uid != 'user_abc'
     * @deny (get, list, update, delete) - User 'user_xyz' cannot read, update, or delete a payment under user 'user_abc''s promissory note.
     *   request.auth.uid != 'user_abc'
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/clients/{clientId}/promissoryNotes/{promissoryNoteId}/payments/{paymentId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }
    /**
     * @description Secures the /users/{userId}/settings/appSettings document, ensuring only the authenticated user can manage their own settings.
     * @path /users/{userId}/settings/appSettings
     * @allow (get, update) - User 'user_abc' can read or update their app settings.
     *   request.auth.uid == 'user_abc'
     * @allow (create) - User 'user_abc' can create their app settings.
     *   request.auth.uid == 'user_abc'
     * @deny (get, update) - User 'user_xyz' cannot read or update user 'user_abc''s app settings.
     *   request.auth.uid != 'user_abc'
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/settings/appSettings {
          function isOwner(userId) {
            return request.auth != null && request.auth.uid == userId;
          }

          allow get: if isOwner(userId);
          allow list: if false;
          allow create: if isOwner(userId);
          allow update: if isOwner(userId) && resource != null;
          allow delete: if false;
        }
  }
}