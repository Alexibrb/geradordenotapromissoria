/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Each user has a dedicated data tree under `/users/{userId}`.
 * Only the authenticated user matching the `userId` can read or write data within their own tree.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /users/{userId}/clients/{clientId}: Stores client information for a user.
 * - /users/{userId}/clients/{clientId}/promissoryNotes/{promissoryNoteId}: Stores promissory notes for a client.
 * - /users/{userId}/clients/{clientId}/promissoryNotes/{promissoryNoteId}/payments/{paymentId}: Stores payment information for a promissory note.
 * - /users/{userId}/settings/appSettings: Stores application settings for a specific user.
 *
 * Key Security Decisions:
 * - User data is strictly isolated based on the `userId` in the path.
 * - No public listing of user documents or subcollections is allowed.
 * - Data validation is limited to ownership checks and relational integrity to facilitate rapid prototyping.
 *
 * Denormalization for Authorization:
 * -  The `AppUser` document's ID must match the Firebase Auth UID. This is enforced on creation.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for the /users/{userId} document. Only the authenticated user can read or write their own profile.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (create) - An authenticated user can create their own user document if the document ID matches their UID.
     * @allow (get, list) - An authenticated user can read their own user document.
     * @allow (update, delete) - An authenticated user can update their own user document.
     * @deny (create) - A user cannot create a document with a userId that doesn't match their own auth.uid.
     * @deny (update, delete) - A user cannot update/delete a document with a userId that doesn't match their own auth.uid.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // User listing is not permitted.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for client documents. Only the authenticated user can read or write clients under their user document.
     * @path /databases/{database}/documents/users/{userId}/clients/{clientId}
     * @allow (create, get, list, update, delete) - An authenticated user can manage their own clients.
     * @deny (create, get, list, update, delete) - A user cannot manage clients for a different user.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/clients/{clientId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }
        
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for promissory note documents. Only the authenticated user can read or write promissory notes under their client document.
     * @path /databases/{database}/documents/users/{userId}/clients/{clientId}/promissoryNotes/{promissoryNoteId}
     * @allow (create, get, list, update, delete) - An authenticated user can manage their own promissory notes.
     * @deny (create, get, list, update, delete) - A user cannot manage promissory notes for a different user or client.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/clients/{clientId}/promissoryNotes/{promissoryNoteId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for payment documents. Only the authenticated user can read or write payments under their promissory note document.
     * @path /databases/{database}/documents/users/{userId}/clients/{clientId}/promissoryNotes/{promissoryNoteId}/payments/{paymentId}
     * @allow (create, get, list, update, delete) - An authenticated user can manage their own payments.
     * @deny (create, get, list, update, delete) - A user cannot manage payments for a different user, client or promissory note.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/clients/{clientId}/promissoryNotes/{promissoryNoteId}/payments/{paymentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

      /**
       * @description Enforces user-ownership for the app settings document. Only the authenticated user can read or write their own settings.
       * @path /databases/{database}/documents/users/{userId}/settings/appSettings
       * @allow (create, get, list, update, delete) - An authenticated user can manage their own settings.
       * @deny (create, get, list, update, delete) - A user cannot manage settings for a different user.
       * @principle Enforces document ownership for all operations.
       */
    match /users/{userId}/settings/appSettings {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Only a single document exists
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}