/**
 * @file Firebase Security Rules for Promissory Note App
 * @version 2
 *
 * @description This ruleset enforces a strict user-ownership model for most data, ensuring users can only access their own data.
 *
 * @dataStructure
 * - All user-specific data (clients, promissory notes, payments, settings) is nested under `/users/{userId}`.
 * - Global application settings are stored in the `/app_settings/general` document.
 *
 * @keySecurityDecisions
 * - Users can only manage their own data.
 * - Listing of users is not allowed.
 * - Global app settings are publicly readable.
 *
 * @denormalizationForAuthorization
 * - User ownership is enforced using path-based rules (e.g., `/users/{userId}/clients/{clientId}`).
 *
 * @structuralSegregation
 * - User-specific data is segregated under the `/users/{userId}` path.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows a user to manage their own profile data. Document ID must match the user's auth UID.
     * @path /users/{userId}
     * @allow (create) User with UID 'user_abc' can create their profile at /users/user_abc.
     * @allow (get) User with UID 'user_abc' can get their profile at /users/user_abc.
     * @allow (update) User with UID 'user_abc' can update their profile at /users/user_abc.
     * @allow (delete) User with UID 'user_abc' can delete their profile at /users/user_abc.
     * @deny (create) User with UID 'user_xyz' cannot create a profile at /users/user_abc.
     * @deny (get) User with UID 'user_xyz' cannot get the profile at /users/user_abc.
     * @deny (update) User with UID 'user_xyz' cannot update the profile at /users/user_abc.
     * @deny (delete) User with UID 'user_xyz' cannot delete the profile at /users/user_abc.
     * @principle Enforces document ownership and prevents unauthorized data access.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && resource != null && isOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && resource != null && isOwner(userId);
    }

    /**
     * @description Allows a user to manage their own clients.
     * @path /users/{userId}/clients/{clientId}
     * @allow (create) User with UID 'user_abc' can create a client under /users/user_abc/clients/client_1.
     * @allow (get) User with UID 'user_abc' can get a client under /users/user_abc/clients/client_1.
     * @allow (update) User with UID 'user_abc' can update a client under /users/user_abc/clients/client_1.
     * @allow (delete) User with UID 'user_abc' can delete a client under /users/user_abc/clients/client_1.
     * @deny (create) User with UID 'user_xyz' cannot create a client under /users/user_abc/clients/client_1.
     * @deny (get) User with UID 'user_xyz' cannot get the client under /users/user_abc/clients/client_1.
     * @deny (update) User with UID 'user_xyz' cannot update the client under /users/user_abc/clients/client_1.
     * @deny (delete) User with UID 'user_xyz' cannot delete the client under /users/user_abc/clients/client_1.
     * @principle Enforces document ownership and prevents unauthorized data access.
     */
    match /users/{userId}/clients/{clientId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isSignedIn() && resource != null && isOwner(userId);
        allow delete: if isSignedIn() && resource != null && isOwner(userId);
    }

    /**
     * @description Allows a user to manage their own promissory notes for a specific client.
     * @path /users/{userId}/clients/{clientId}/promissoryNotes/{promissoryNoteId}
     * @allow (create) User with UID 'user_abc' can create a promissory note under /users/user_abc/clients/client_1/promissoryNotes/note_1.
     * @allow (get) User with UID 'user_abc' can get a promissory note under /users/user_abc/clients/client_1/promissoryNotes/note_1.
     * @allow (update) User with UID 'user_abc' can update a promissory note under /users/user_abc/clients/client_1/promissoryNotes/note_1.
     * @allow (delete) User with UID 'user_abc' can delete a promissory note under /users/user_abc/clients/client_1/promissoryNotes/note_1.
     * @deny (create) User with UID 'user_xyz' cannot create a promissory note under /users/user_abc/clients/client_1/promissoryNotes/note_1.
     * @deny (get) User with UID 'user_xyz' cannot get the promissory note under /users/user_abc/clients/client_1/promissoryNotes/note_1.
     * @deny (update) User with UID 'user_xyz' cannot update the promissory note under /users/user_abc/clients/client_1/promissoryNotes/note_1.
     * @deny (delete) User with UID 'user_xyz' cannot delete the promissory note under /users/user_abc/clients/client_1/promissoryNotes/note_1.
     * @principle Enforces document ownership and prevents unauthorized data access.
     */
    match /users/{userId}/clients/{clientId}/promissoryNotes/{promissoryNoteId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isSignedIn() && resource != null && isOwner(userId);
        allow delete: if isSignedIn() && resource != null && isOwner(userId);
    }

    /**
     * @description Allows a user to manage payments for their promissory notes.
     * @path /users/{userId}/clients/{clientId}/promissoryNotes/{promissoryNoteId}/payments/{paymentId}
     * @allow (create) User with UID 'user_abc' can create a payment under /users/user_abc/clients/client_1/promissoryNotes/note_1/payments/payment_1.
     * @allow (get) User with UID 'user_abc' can get a payment under /users/user_abc/clients/client_1/promissoryNotes/note_1/payments/payment_1.
     * @allow (update) User with UID 'user_abc' can update a payment under /users/user_abc/clients/client_1/promissoryNotes/note_1/payments/payment_1.
     * @allow (delete) User with UID 'user_abc' can delete a payment under /users/user_abc/clients/client_1/promissoryNotes/note_1/payments/payment_1.
     * @deny (create) User with UID 'user_xyz' cannot create a payment under /users/user_abc/clients/client_1/promissoryNotes/note_1/payments/payment_1.
     * @deny (get) User with UID 'user_xyz' cannot get the payment under /users/user_abc/clients/client_1/promissoryNotes/note_1/payments/payment_1.
     * @deny (update) User with UID 'user_xyz' cannot update the payment under /users/user_abc/clients/client_1/promissoryNotes/note_1/payments/payment_1.
     * @deny (delete) User with UID 'user_xyz' cannot delete the payment under /users/user_abc/clients/client_1/promissoryNotes/note_1/payments/payment_1.
     * @principle Enforces document ownership and prevents unauthorized data access.
     */
    match /users/{userId}/clients/{clientId}/promissoryNotes/{promissoryNoteId}/payments/{paymentId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isSignedIn() && resource != null && isOwner(userId);
        allow delete: if isSignedIn() && resource != null && isOwner(userId);
    }

       /**
        * @description Allows a user to manage their own application settings.
        * @path /users/{userId}/settings/appSettings
        * @allow (get) User with UID 'user_abc' can get their settings document.
        * @allow (update) User with UID 'user_abc' can update their settings document.
        * @deny (get) User with UID 'user_xyz' cannot get the settings document of user_abc.
        * @deny (update) User with UID 'user_xyz' cannot update the settings document of user_abc.
        * @principle Enforces document ownership and prevents unauthorized data access.
        */
    match /users/{userId}/settings/appSettings {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
        allow get: if isOwner(userId);
        allow list: if false;
        allow create: if false;
        allow update: if isSignedIn() && resource != null && isOwner(userId);
        allow delete: if false;
    }

    /**
     * @description Allows anyone to read the global application settings. Only authenticated users can update.
     * @path /app_settings/general
     * @allow (get) Any user can read the global app settings.
     * @allow (list) Any user can list the global app settings.
     * @deny (create) Only authenticated users can create app settings.
     * @deny (update) Only authenticated users can update app settings.
     * @deny (delete) Only authenticated users can delete app settings.
     * @principle Allows public read access to general app settings while restricting write access.
     */
    match /app_settings/general {
        function isSignedIn() {
          return request.auth != null;
        }

        allow get: if true;
        allow list: if true;
        allow create: if false;
        allow update: if isSignedIn();
        allow delete: if false;
    }
  }
}