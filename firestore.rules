/**
 * @fileOverview Firestore Security Rules for Promissory Note App.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Each user has complete control over their own data tree,
 * including clients, promissory notes, and payments. Only authenticated users can access their data. Administrative
 * privileges are granted to users with the 'admin' role, allowing them to manage user accounts.
 *
 * Data Structure:
 * All data is nested under /users/{userId}, ensuring data isolation.
 * - /users/{userId}: Stores user profile information (AppUser).
 * - /users/{userId}/clients/{clientId}: Stores client data.
 * - /users/{userId}/clients/{clientId}/promissoryNotes/{promissoryNoteId}: Stores promissory notes related to a specific client.
 * - /users/{userId}/clients/{clientId}/promissoryNotes/{promissoryNoteId}/payments/{paymentId}: Stores payments for a promissory note.
 * - /users/{userId}/settings/appSettings: Stores user-specific application settings.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Admin users have elevated privileges for user management (deletion).
 * - Data validation is limited to authorization-critical fields for rapid prototyping.
 * - The rules explicitly deny any operation that is not explicitly allowed.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by an authenticated user.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     * @param {string} userId - The user ID to compare against the authenticated user's UID.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is an admin.
     * @returns {boolean} True if the user has the 'admin' role, false otherwise.
     */
    function isAdmin() {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    /**
     * @description Checks if the authenticated user is the existing owner of the document.
     * @param {string} userId - The user ID to compare against the authenticated user's UID.
     * @returns {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }


    /**
     * @description Security rules for user profiles.
     * @path /users/{userId}
     * @allow (create) - User with matching UID can create their profile.
     * @allow (get, update, delete) - Owner can read, update, and delete their profile.
     * @deny (create) - User cannot create a profile with a mismatched UID.
     * @deny (update, delete) - Non-owner cannot update or delete the profile.
     * @principle Enforces document ownership and self-creation for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isAdmin();
    }

    /**
     * @description Security rules for clients under a specific user.
     * @path /users/{userId}/clients/{clientId}
     * @allow (create) - Owner can create a new client.
     * @allow (get, list, update, delete) - Owner can read, list, update, and delete their clients.
     * @deny (create, update, delete) - Non-owner cannot create, update, or delete clients.
     * @principle Enforces document ownership for client data.
     */
    match /users/{userId}/clients/{clientId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for promissory notes under a specific client.
     * @path /users/{userId}/clients/{clientId}/promissoryNotes/{promissoryNoteId}
     * @allow (create) - Owner can create a new promissory note.
     * @allow (get, list, update, delete) - Owner can read, list, update, and delete their promissory notes.
     * @deny (create, update, delete) - Non-owner cannot create, update, or delete promissory notes.
     * @principle Enforces document ownership for promissory note data.
     */
    match /users/{userId}/clients/{clientId}/promissoryNotes/{promissoryNoteId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for payments under a specific promissory note.
     * @path /users/{userId}/clients/{clientId}/promissoryNotes/{promissoryNoteId}/payments/{paymentId}
     * @allow (create) - Owner can create a new payment.
     * @allow (get, list, update, delete) - Owner can read, list, update, and delete their payments.
     * @deny (create, update, delete) - Non-owner cannot create, update, or delete payments.
     * @principle Enforces document ownership for payment data.
     */
    match /users/{userId}/clients/{clientId}/promissoryNotes/{promissoryNoteId}/payments/{paymentId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for user-specific application settings.
     * @path /users/{userId}/settings/appSettings
     * @allow (get, create, update) - Owner can read, create, and update their settings.
     * @deny (delete) - Deletion of settings is disallowed.
     * @deny (create, update) - Non-owner cannot create or update settings.
     * @principle Enforces document ownership for application settings.
     */
    match /users/{userId}/settings/appSettings {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if false;
    }
  }
}