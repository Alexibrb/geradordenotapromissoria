/**
 * @fileOverview Firestore Security Rules for Promissory Note App
 *
 * @description
 * Core Philosophy: This ruleset enforces a strict user-ownership model for most data,
 * with public read access to global application settings.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. Document ID must match the user's auth UID.
 * - /users/{userId}/clients/{clientId}: Stores client information. Only accessible by the owning user.
 * - /users/{userId}/clients/{clientId}/promissoryNotes/{promissoryNoteId}: Stores promissory notes. Only accessible by the owning user.
 * - /users/{userId}/clients/{clientId}/promissoryNotes/{promissoryNoteId}/payments/{paymentId}: Stores payment information. Only accessible by the owning user.
 * - /users/{userId}/settings/appSettings: Stores user-specific application settings.
 * - /app_settings/general: Stores global application settings. Publicly readable.
 *
 * Key Security Decisions:
 * - User data is isolated under the /users/{userId} path, enforcing strict ownership.
 * - Listing of users is disallowed.
 * - Global settings in /app_settings/general are publicly readable.
 *
 * Denormalization for Authorization:
 *  - The rules rely on path-based ownership, eliminating the need for denormalization in most cases.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the request is made by the owner of the resource.
     * @param {string} userId - The user ID to compare with the request's auth UID.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

     /**
     * @description Checks if the request is made by the existing owner of the resource.
     * @param {string} userId - The user ID to compare with the resource data.
     * @returns {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their own profile document at /users/user123.
     * @deny (create) - User with UID 'user123' cannot create a profile document at /users/anotherUser.
     * @allow (get, update, delete) - User with UID 'user123' can read, update, and delete their own profile.
     * @deny (get, update, delete) - User with UID 'user123' cannot read, update, or delete another user's profile.
     * @principle Enforces document ownership and validates relational integrity.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for clients under a user.
     * @path /users/{userId}/clients/{clientId}
     * @allow (create) - User with UID 'user123' can create a client under their user document.
     * @deny (create) - User with UID 'user123' cannot create a client under another user's document.
     * @allow (get, list, update, delete) - User with UID 'user123' can read, list, update, and delete their own clients.
     * @deny (get, list, update, delete) - User with UID 'user123' cannot read, list, update, or delete another user's clients.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/clients/{clientId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for promissory notes under a client of a user.
     * @path /users/{userId}/clients/{clientId}/promissoryNotes/{promissoryNoteId}
     * @allow (create) - User with UID 'user123' can create a promissory note under their client.
     * @deny (create) - User with UID 'user123' cannot create a promissory note under another user's client.
     * @allow (get, list, update, delete) - User with UID 'user123' can read, list, update, and delete their own promissory notes.
     * @deny (get, list, update, delete) - User with UID 'user123' cannot read, list, update, or delete another user's promissory notes.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/clients/{clientId}/promissoryNotes/{promissoryNoteId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for payments under a promissory note of a client of a user.
     * @path /users/{userId}/clients/{clientId}/promissoryNotes/{promissoryNoteId}/payments/{paymentId}
     * @allow (create) - User with UID 'user123' can create a payment under their promissory note.
     * @deny (create) - User with UID 'user123' cannot create a payment under another user's promissory note.
     * @allow (get, list, update, delete) - User with UID 'user123' can read, list, update, and delete their own payments.
     * @deny (get, list, update, delete) - User with UID 'user123' cannot read, list, update, or delete another user's payments.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/clients/{clientId}/promissoryNotes/{promissoryNoteId}/payments/{paymentId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for user-specific application settings.
     * @path /users/{userId}/settings/appSettings
     * @allow (get, create, update, delete) - User with UID 'user123' can read, create, update, and delete their own settings.
     * @deny (get, create, update, delete) - User with UID 'user123' cannot read, create, update, or delete another user's settings.
     */
    match /users/{userId}/settings/appSettings {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for global application settings.
     * @path /app_settings/general
     * @allow (get, list) - Anyone can read the global application settings.
     * @deny (create, update, delete) - No one can create, update, or delete the global application settings.
     */
    match /app_settings/general {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}