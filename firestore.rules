/**
 * @fileOverview Firestore Security Rules for Promissory Note App
 *
 * @corePhilosophy This ruleset enforces a strict user-ownership model for most data,
 *   ensuring that users can only access their own resources (clients, promissory notes, payments).
 *   Global application settings are publicly readable, but write access is restricted.
 *
 * @dataStructure The data is organized hierarchically under `/users/{userId}`, with
 *   subcollections for `clients`, `promissoryNotes`, and `payments`. User settings are
 *   stored under `/users/{userId}/settings/appSettings`, and global settings are in
 *   the top-level `/app_settings/general` document.
 *
 * @keySecurityDecisions
 *   - User listing is disallowed for privacy.
 *   - The `AppSettings` document is publicly readable but not writable by regular users.
 *   - Data validation is limited to ownership checks and critical relational fields for
 *     authorization purposes, avoiding complex schema enforcement in the rules.
 *
 * @denormalizationForAuthorization
 *   - The rules leverage path-based authorization, ensuring that the `userId` in the
 *     document path matches the authenticated user's UID (`request.auth.uid`).
 *     This approach avoids the need for costly `get()` calls to verify ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId - The user ID to compare against the authenticated user's UID.
     * @returns {boolean} True if the user IDs match, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner and the resource exists.
     * @param {string} userId - The user ID to compare against the authenticated user's UID.
     * @returns {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for user documents.
     * @path /users/{userId}
     * @allow (create) Signed-in user can create their own document.
     * @allow (get,update,delete) Only the signed-in user who owns the document can access.
     * @deny (create) Creating a user document with an ID that doesn't match the auth UID.
     * @deny (list) Listing all users is not allowed.
     * @principle Enforces document ownership, restricts user listing, and validates relational integrity.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for client documents under a user.
     * @path /users/{userId}/clients/{clientId}
     * @allow (create) Only the signed-in user who owns the parent user document can create a client document.
     * @allow (get,list,update,delete) Only the signed-in user who owns the parent user document can access/modify.
     * @deny (create) Creating a client document under a different user's document.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/clients/{clientId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for promissory note documents under a client.
     * @path /users/{userId}/clients/{clientId}/promissoryNotes/{promissoryNoteId}
     * @allow (create) Only the signed-in user who owns the parent client document can create a promissory note document.
     * @allow (get,list,update,delete) Only the signed-in user who owns the parent client document can access/modify.
     * @deny (create) Creating a promissory note document under a different user's/client's document.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/clients/{clientId}/promissoryNotes/{promissoryNoteId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for payment documents under a promissory note.
     * @path /users/{userId}/clients/{clientId}/promissoryNotes/{promissoryNoteId}/payments/{paymentId}
     * @allow (create) Only the signed-in user who owns the parent promissory note document can create a payment document.
     * @allow (get,list,update,delete) Only the signed-in user who owns the parent promissory note document can access/modify.
     * @deny (create) Creating a payment document under a different user's/client's/note's document.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/clients/{clientId}/promissoryNotes/{promissoryNoteId}/payments/{paymentId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for user-specific settings.
     * @path /users/{userId}/settings/appSettings
     * @allow (get,update) Only the signed-in user who owns the parent user document can read and update their settings.
     * @deny (create,delete) Creating or deleting the settings document is not allowed (it should be created on user creation).
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/settings/appSettings {
      allow get, update: if isOwner(userId);
      allow create, delete: if false;
    }

    /**
     * @description Rules for global application settings.
     * @path /app_settings/general
     * @allow (get,list) All users can read global settings.
     * @deny (create,update,delete) Only administrators can modify global settings (TODO: add admin role check later).
     * @principle Public read access with owner-only writes.
     */
    match /app_settings/general {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin validation once roles are implemented.
    }
  }
}