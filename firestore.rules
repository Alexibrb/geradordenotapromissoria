rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    /**
     * @description Checks if the request is made by an authenticated user.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the existing document.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for the /users/{userId}/clients collection.
     * @path /users/{userId}/clients
     * @allow (list) - Authenticated user with ID 'M9q0hYODH9QpaIt8dqC80rWhR5y2' can list client documents under their user id.
     * @deny (list) -  Authenticated user with ID 'user456' cannot list client documents under /users/user123/clients.
     * @principle Enforces user-ownership for all operations on client documents.
     */
    match /users/{userId}/clients {
      allow list: if isOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/clients/{clientId} collection.
     * @path /users/{userId}/clients/{clientId}
     * @allow (create) - Authenticated user with ID 'user123' can create a new client document with clientId equal to 'user123'.
     * @allow (get, list) - Authenticated user with ID 'user123' can read their client document.
     * @deny (create) - Authenticated user with ID 'user456' cannot create a client document under /users/user123/clients/.
     * @deny (update, delete) - Authenticated user cannot modify a client document that doesn't exist.
     * @principle Enforces user-ownership for all operations on client documents.
     */
    match /users/{userId}/clients/{clientId} {
      // Read rules
      allow get: if isOwner(userId);

      // Write rules
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/clients/{clientId}/promissoryNotes/{promissoryNoteId} collection.
     * @path /users/{userId}/clients/{clientId}/promissoryNotes/{promissoryNoteId}
     * @allow (create) - Authenticated user with ID 'user123' can create a new promissoryNote document with clientId equal to 'client456' and client456 is owned by user123.
     * @allow (get, list) - Authenticated user with ID 'user123' can read their promissoryNote documents.
     * @deny (create) - Authenticated user with ID 'user456' cannot create a promissoryNote document under /users/user123/clients/client456/promissoryNotes/.
     * @deny (update, delete) - Authenticated user cannot modify a promissoryNote document that doesn't exist.
     * @principle Enforces user-ownership for all operations on promissoryNote documents.
     */
    match /users/{userId}/clients/{clientId}/promissoryNotes/{promissoryNoteId} {
      // Read rules
      allow get: if isOwner(userId);

      // Write rules
      allow create: if isOwner(userId) ;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/clients/{clientId}/promissoryNotes/{promissoryNoteId}/payments/{paymentId} collection.
     * @path /users/{userId}/clients/{clientId}/promissoryNotes/{promissoryNoteId}/payments/{paymentId}
     * @allow (create) - Authenticated user with ID 'user123' can create a new payment document with clientId equal to 'client456', promissoryNoteId 'note789' and client456 is owned by user123.
     * @allow (get, list) - Authenticated user with ID 'user123' can read their payment documents.
     * @deny (create) - Authenticated user with ID 'user456' cannot create a payment document under /users/user123/clients/client456/promissoryNotes/note789/payments/.
     * @deny (update, delete) - Authenticated user cannot modify a payment document that doesn't exist.
     * @principle Enforces user-ownership for all operations on payment documents.
     */
    match /users/{userId}/clients/{clientId}/promissoryNotes/{promissoryNoteId}/payments/{paymentId} {
      // Read rules
      allow get: if isOwner(userId);

      // Write rules
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }
  }
}